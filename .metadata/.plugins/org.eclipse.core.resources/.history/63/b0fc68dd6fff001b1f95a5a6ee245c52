apply plugin : 'java'
apply plugin : 'eclipse-wtp'
apply plugin : 'war'

compileJava.options.encoding = 'UTF-8'	//소스파일 인코딩 형식
sourceCompatibility = 1.8			// 소스
version = '1.0'

eclipse {
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	wtp {
		facet{
			facet name : 'jst.web', version : '3.0' // Servlet Spec Version 지정
			facet name : 'jst.java', version : '1.8' // Java Version 지정
		}
	}
}

jar {
	manifest {
		attributes 'Implementation-Title' : 'Gradle Quickstart', 'Implementation-Version' : version
	}
	// manifest : MANIFEST.MF 파일에 들어갈 속서깝값 정보를 설정. 이 파일은 jar 파일 안에 META-INF 에 들어감
	// archiveName : JAR 파일 이름. 지정하지 않으면 다음 조합으로 이름 지정. baseName-appendix-version-classifier.extension 
	//		baseName -> Jar 파일 기본 이름.
	//		appendix -> 추가할 말
	//		version -> 버전
	//		classifier -> ?
	// 		extension : 확장자
	// excludes : jar 파일에서 제외할 파일에 대해 지정. ['**/*.txt'] -> 폴더에 상관없이 확장자 txt 파일 제외
	// includes : jar 파일에서 포함할 파일에 대해 지정. ['conf/*.xml'] -> conf 폴더 하위에 xml 파일 포함
}
repositories {
	mavenCentral()
	// mavenCentral : Maven 중앙 서버를 저장소로 지정. 서버의 기본 Url 은 http://repo1.meven.org/maven2
	// flatDir() : 로컬 폴더를 저장소로 지정
	// ivy() : apache Ivy 서버를 저장소로 지정
	// jcenter() : Bintray의 jcenter 서버를 저장소로 지정
	// mavenLocal() : Maven 로컬 임시 보관소를 저장소로 지정
}

dependencies {
	providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
	
	compile 'org.springframework:spring-webmvc:4.1.4.RELEASE'
	compile group : 'commons-collections', name : 'commons-collections', version : '3.2'
	testCompile group : 'junit', name : 'junit', version : '4.+'
	/*
		compile 라이브러리 : 라이브러리를 compileJava 작업을 수행할 때 사용
		runtime 라이브러리 : 라이브러리를 실행 시에 사용
		testCompile 라이브러리 : 라이브러리를 compileTestJava 작업을 수행할 때 사용. 이 작업은 compileJava 를 포함하고 있으므로 compile 한 라이브러리는 제외하고 적음
		testRuntime 라이브러리 : 라이브러리를 test 작업을 수행할 때 사용. 이작업은 compileJava, compileTestJava 작업을 포함하고 있으므로 compile, testCompile 한 라이브러리는 제외하고 적음
		providedCompile : compile 과 같지만 .war 파일에서는 포함하지 않는다
		providedRuntime : runtime 과 같지만 .war 파일에서는 포함하지 않는다
		
		*라이브러리 표기법*
		1. 'group:name:version:classifier'
			Example) 'org.springframework:spring-context:4.1.4.RELEASE'
		2. group : '그룹명
			Example) group : 'commons-collections', name : 'commons-collections', version : '3.2'
	*/
}
test {
	systemProperties 'property' : 'value'
	/*
		systemProperties : 테스트를 실행하는 JVM 에 전달할 시스템 프로퍼티 지정
		classpath : 테스트 작업을 수행할 때 사용할 클래스 경로 지정
		excludes : 테스트에서 제외할 클래스 지정. ANT 스타일 패턴을 사용. Ex) excludes = [org/foo/**] org.foo 패키지 하위 모든 클래스 테스트에서 제외
		includes : 테스트에 포함할 클래스 지정
		minHeapSize : 테스트 할 때 JVM 에 전달할 최소 힙 크기
		maxHeapSize : 
		jvmArgs : JVM 에게 전달할 추가 인자 값. 시스템 프로퍼티와 최대/최소 힙 메모리 크기는 별도로 지정하기 때문에 이 항목에 포함되서는 안된다.
		useJUnit() : 테스트할 때 사용할 프레임워크로 JUnit 지정. 기본으로 JUnit
		useTestNG() : 테스트할 때 사용할 프레임워크로 TestNG
		beforeTest{} : 테스트를 시작하기전에 수행할 명령들을 지정
	*/
}

// uploadArchives {} : 아카이브파일(.jar) 배포
uploadArchives {
	repositories {
		flatDir {
			dirs 'repos'
		}
	}
}